// src/components/layout/AdminHeader.tsx
'use client'; // C·∫ßn thi·∫øt n·∫øu c√≥ t∆∞∆°ng t√°c nh∆∞ dropdown, theme toggle

import React, { useState } from 'react';
import Image from 'next/image';
import { useAuth } from '@/contexts/AuthContext'; // ƒê·ªÉ l·∫•y th√¥ng tin user
// (T√πy ch·ªçn) Import icons t·ª´ react-icons
// import { FiBell, FiSun, FiMoon, FiChevronDown, FiLogOut } from 'react-icons/fi';

// Props ƒë·ªÉ nh·∫≠n ti√™u ƒë·ªÅ trang ƒë·ªông
interface AdminHeaderProps {
  pageTitle: string;
}

export const AdminHeader = ({ pageTitle }: AdminHeaderProps) => {
  const { user, logout } = useAuth(); // L·∫•y user v√† h√†m logout t·ª´ context
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  // State v√≠ d·ª• cho theme toggle
  const [isDarkMode, setIsDarkMode] = useState(false);

  return (
    <header className="bg-white shadow-sm h-16 flex items-center justify-between px-6 sticky top-0 z-30">
      {/* Ti√™u ƒë·ªÅ Trang */}
      <h1 className="text-xl font-semibold text-gray-800">{pageTitle}</h1>

      {/* C√°c n√∫t b√™n ph·∫£i */}
      <div className="flex items-center space-x-4">
        {/* N√∫t Chu√¥ng Th√¥ng B√°o */}
        <button className="relative text-gray-500 hover:text-gray-700 focus:outline-none">
          {/* <FiBell className="h-5 w-5" /> */} üîî
          {/* (T√πy ch·ªçn) D·∫•u ch·∫•m ƒë·ªè b√°o c√≥ th√¥ng b√°o m·ªõi */}
          <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500 ring-2 ring-white"></span>
        </button>

        {/* N√∫t Chuy·ªÉn ƒê·ªïi Giao Di·ªán */}
        <button
          onClick={() => setIsDarkMode(!isDarkMode)}
          className="text-gray-500 hover:text-gray-700 focus:outline-none"
          aria-label={isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'}
        >
          {/* {isDarkMode ? <FiSun className="h-5 w-5" /> : <FiMoon className="h-5 w-5" />} */}
          {isDarkMode ? '‚òÄÔ∏è' : 'üåô'}
        </button>

        {/* Menu Ng∆∞·ªùi D√πng */}
        <div className="relative">
          <button
            onClick={() => setIsDropdownOpen(!isDropdownOpen)}
            className="flex items-center space-x-2 focus:outline-none"
          >
            {/* ·∫¢nh ƒë·∫°i di·ªán */}
            <div className="w-8 h-8 rounded-full overflow-hidden border">
              {/* Thay b·∫±ng ·∫£nh th·∫≠t */}
              <Image
                src={`https://i.pravatar.cc/150?u=${user?.email || 'admin'}`}
                alt="Admin Avatar"
                width={32}
                height={32}
              />
            </div>
            {/* T√™n v√† Email */}
            <div className="hidden sm:block text-left">
              <span className="block text-sm font-medium text-gray-800">{user?.fullName || 'Admin'}</span>
              <span className="block text-xs text-gray-500">{user?.email || 'admin@example.com'}</span>
            </div>
            {/* M≈©i t√™n Dropdown */}
            {/* <FiChevronDown className={`h-4 w-4 text-gray-500 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`} /> */} ‚ñº
          </button>

          {/* N·ªôi dung Dropdown */}
          {isDropdownOpen && (
            <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 ring-1 ring-black ring-opacity-5">
              <a
                href="#"
                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                role="menuitem"
              >
                H·ªì s∆°
              </a>
              <button
                onClick={logout} // G·ªçi h√†m logout t·ª´ AuthContext
                className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100"
                role="menuitem"
              >
                {/* <FiLogOut className="inline mr-2 h-4 w-4"/> */} ƒêƒÉng xu·∫•t
              </button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};