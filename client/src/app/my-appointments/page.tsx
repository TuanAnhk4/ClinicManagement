'use client';

import { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/api';
import { Appointment, AppointmentStatus } from '@/types';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import Link from 'next/link'; // ƒê·∫£m b·∫£o ƒë√£ import Link

export default function MyAppointmentsPage() {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [error, setError] = useState('');
  const [view, setView] = useState<'upcoming' | 'history'>('upcoming');
  const { isAuthenticated, user, loading: authLoading } = useAuth();

  const fetchAppointments = async () => {
    try {
      const response = await api.get('/appointments/patient/me');
      setAppointments(response.data);
    } catch (err) {
      console.error("Failed to fetch appointments:", err);
      setError('Kh√¥ng th·ªÉ t·∫£i l·ªãch h·∫πn c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  useEffect(() => {
    if (!authLoading && isAuthenticated) {
      fetchAppointments();
    }
  }, [isAuthenticated, authLoading]);

  const handleCancel = async (appointmentId: number) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn n√†y kh√¥ng?')) {
      try {
        await api.patch(`/appointments/${appointmentId}/cancel`);
        fetchAppointments();
      } catch (error) {
        console.error('Failed to cancel appointment:', error);
        alert('H·ªßy l·ªãch h·∫πn th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  const filteredAppointments = useMemo(() => {
    const now = new Date();
    // Chuy·ªÉn ƒë·ªïi status th√†nh AppointmentStatus enum n·∫øu c·∫ßn, ho·∫∑c gi·ªØ nguy√™n string n·∫øu backend tr·∫£ v·ªÅ string
    if (view === 'upcoming') {
      return appointments.filter(app => new Date(app.appointmentTime) >= now && app.status === AppointmentStatus.CONFIRMED);
    }
    // L·ªãch s·ª≠ bao g·ªìm c√°c tr·∫°ng th√°i kh√°c CONFIRMED ho·∫∑c th·ªùi gian ƒë√£ qua
    return appointments.filter(app => new Date(app.appointmentTime) < now || app.status !== AppointmentStatus.CONFIRMED);
  }, [appointments, view]);


  if (authLoading) {
    return <div className="p-8">ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  }
  if (error) {
    return <div className="p-8 text-red-500">{error}</div>;
  }

  return (
    <div className="p-6 md:p-8">
      <h1 className="text-3xl font-bold mb-6">L·ªãch H·∫πn C·ªßa T√¥i</h1>

      {/* H·ªá th·ªëng Tab */}
      <div className="flex space-x-4 border-b mb-6">
        <button
          onClick={() => setView('upcoming')}
          className={`py-2 px-1 font-semibold transition-colors ${
            view === 'upcoming'
              ? 'border-b-2 border-blue-600 text-blue-600'
              : 'text-gray-500 hover:text-gray-800'
          }`}
        >
          S·∫Øp T·ªõi
        </button>
        <button
          onClick={() => setView('history')}
          className={`py-2 px-1 font-semibold transition-colors ${
            view === 'history'
              ? 'border-b-2 border-blue-600 text-blue-600'
              : 'text-gray-500 hover:text-gray-800'
          }`}
        >
          L·ªãch S·ª≠
        </button>
      </div>

      {/* Danh s√°ch l·ªãch h·∫πn */}
      {filteredAppointments.length > 0 ? (
        <div className="space-y-4">
          {filteredAppointments.map((app) => (
            
            <Card key={app.id} className="p-4 flex flex-col sm:flex-row items-start sm:items-center justify-between">
              {/* Th√¥ng tin l·ªãch h·∫πn */}
              <div className="flex items-center space-x-4 mb-3 sm:mb-0">
                {/* ·∫¢nh ƒë·∫°i di·ªán b√°c sƒ© c√≥ th·ªÉ th√™m l·∫°i n·∫øu mu·ªën */}
                <div>
                  <p className="font-bold text-lg">Dr. {app.doctor.fullName}</p>
                  <p className="text-sm text-gray-600">
                    üóìÔ∏è {new Date(app.appointmentTime).toLocaleDateString('vi-VN')} -
                    üïì {new Date(app.appointmentTime).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}
                  </p>
                </div>
              </div>

              {/* Tr·∫°ng th√°i v√† H√†nh ƒë·ªông */}
              <div className="flex flex-col sm:flex-row items-end sm:items-center space-y-2 sm:space-y-0 sm:space-x-3 w-full sm:w-auto">
                <span className={`px-3 py-1 text-xs font-semibold rounded-full whitespace-nowrap ${
                  app.status === AppointmentStatus.CONFIRMED ? 'bg-blue-100 text-blue-800' :
                  app.status === AppointmentStatus.COMPLETED ? 'bg-green-100 text-green-800' :
                  app.status === AppointmentStatus.CANCELLED ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800' // Th√™m default case
                }`}>
                  {app.status}
                </span>

                {/* N√∫t H·ªßy cho tab S·∫Øp t·ªõi */}
                {view === 'upcoming' && (
                  <Button size="small" variant="danger" onClick={() => handleCancel(app.id)}>
                    H·ªßy L·ªãch
                  </Button>
                )}

                {/* --- S·ª¨A ·ªû ƒê√ÇY --- */}
                {/* N√∫t Xem Chi Ti·∫øt cho tab L·ªãch s·ª≠ (ch·ªâ khi ƒë√£ ho√†n th√†nh) */}
                {view === 'history' && app.status === AppointmentStatus.COMPLETED && (
                  <Link href={`/my-appointments/${app.id}`}>
                    {/* B·ªçc Button b√™n trong Link ƒë·ªÉ gi·ªØ nguy√™n giao di·ªán */}
                    <Button size="small" variant="secondary">
                      Xem Chi Ti·∫øt
                    </Button>
                  </Link>
                )}
                {/* --- K·∫æT TH√öC S·ª¨A --- */}

              </div>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-16">
          <p className="text-gray-500">B·∫°n kh√¥ng c√≥ l·ªãch h·∫πn n√†o trong m·ª•c n√†y.</p>
        </div>
      )}
    </div>
  );
}